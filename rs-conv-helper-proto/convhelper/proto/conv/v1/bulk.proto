syntax = "proto3";

package convhelper.proto.conv.v1;

import "convhelper/proto/uuid/v1/u.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message In {
  message GetRequest {
    convhelper.proto.uuid.v1.Uuid request_id = 1;

    // optional namespace; e.g, cafef00d-dead-beaf-face-864299792458-2023-11-04
    string namespace = 2;

    // optional bucket name; e.g, 08:31
    string bucket = 3;

    // keys in a bucket; e.g, 00, 01, 02, ..., 59
    //
    // omit keys to get all key/val pairs in a bucket
    repeated bytes keys = 4;
  }
  message GetResponse {
    bytes key = 1;
    bytes val = 2;
  }

  message GetsRequest {
    convhelper.proto.uuid.v1.Uuid request_id = 1;

    // optional namespace; e.g, cafef00d-dead-beaf-face-864299792458-2023-11-04
    string namespace = 2;

    // bucket names; e.g, 07:00,07:01,07:02, ... 07:07
    repeated string buckets = 3;
  }
  message GetsResponse {
    string bucket = 1;
    bytes key = 2;
    bytes val = 3;
  }

  message CheckInfo {
    // see GetRequest
    bytes key = 1;

    // validation info before deletes; e.g, checksum
    bytes validate = 2;
  }
  message DelRequest {
    convhelper.proto.uuid.v1.Uuid request_id = 1;

    // see GetRequest
    string namespace = 2;

    // see GetRequest
    string bucket = 3;

    repeated CheckInfo checks = 4;
  }
  message DelRejected {
    // number of key/val pairs validated
    fixed32 validated = 1;

    // number of key/val pairs absent
    fixed32 absent = 2;

    // number of key/val pairs rejected
    fixed32 rejected = 3;
  }
  message DelResponse {
    oneof status {
      // all key/val pairs in a bucket removed
      google.protobuf.Timestamp removed = 1;

      // the bucket to be removed was absent
      google.protobuf.Empty absent = 2;

      // nothing removed due to errors
      DelRejected rejected = 3;
    }
  }
}

service InputService {
  // Gets all key/val pairs in a bucket
  rpc Get(In.GetRequest) returns (stream In.GetResponse);

  rpc Gets(In.GetsRequest) returns (stream In.GetsResponse);

  // Removes all items in a bucket or remove nothing on errors
  rpc Del(In.DelRequest) returns (stream In.DelResponse);
}

message Out {
  message SaveItem {
    bytes key = 1;

    // A converted value
    bytes val = 2;
  }
  message SaveRequest {
    convhelper.proto.uuid.v1.Uuid request_id = 1;

    // output namespace; e.g, cafef00d-dead-beaf-face-864299792458/2023/11/05
    string namespace = 2;

    // output bucket; e.g, 08:30
    string bucket = 3;

    // output key/val pairs
    repeated SaveItem items = 4;
  }
  message SaveResponse {
    // input namespace; e.g, cafef00d-dead-beaf-face-864299792458/2023/11/05
    string namespace = 1;

    // input bucket; e.g, 08:31
    string bucket = 2;

    // see In.CheckInfo
    repeated In.CheckInfo results = 3;
  }
}

service OutputService {
  // Saves small number of items(e.g, size of SaveRequest < 1 MiB)
  rpc Save(Out.SaveRequest) returns (stream Out.SaveResponse);
}
