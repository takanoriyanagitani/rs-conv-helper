syntax = "proto3";

package convhelper.proto.conv.v1;

import "convhelper/proto/uuid/v1/u.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message ConvertRequest {
  convhelper.proto.uuid.v1.Uuid request_id = 1;
  bytes original = 2;
}

message ConvertResponse {
  bytes converted = 1;
}

service CvtService {
  rpc Convert(ConvertRequest) returns (ConvertResponse);
}

message Src {
  message GetSrcRequest {
    convhelper.proto.uuid.v1.Uuid request_id = 1;
    bytes key = 2;
  }
  message GetSrcResponse {
    bytes val = 1; // original bytes
  }

  message DelSrcRequest {
    convhelper.proto.uuid.v1.Uuid request_id = 1;
    bytes key = 2;
  }
  message DelSrcResponse {
    oneof status {
      google.protobuf.Timestamp removed = 1;
      google.protobuf.Empty absent = 2;
    }
  }
}

service SrcService {
  rpc GetSrc(Src.GetSrcRequest) returns (Src.GetSrcResponse);
  rpc DelSrc(Src.DelSrcRequest) returns (Src.DelSrcResponse);
}

message Ind {
  message ConvManyRequest {
    convhelper.proto.uuid.v1.Uuid request_id = 1;
    repeated bytes keys = 2;
  }

  message ConvManyResponse {
    bytes key = 1;
    bytes converted = 2;
  }
}

service IndirectService {
  rpc ConvMany(Ind.ConvManyRequest) returns (stream Ind.ConvManyResponse);
}

message Bkt {
  message CheckInfo {
    // The key to be removed
    bytes key = 1;

    // Check this value derived from the val to be removed(e.g, checksum)
    bytes validate = 2;
  }
  message DelRequest {
    repeated CheckInfo keys = 1;
  }
  message Rejected {
    // keys rejected(e.g, checksum mismatch, bitrot, I/O error)
    repeated bytes rejected_keys = 1;

    // keys validated(e.g, checksum matched)
    repeated bytes validated_keys = 2;

    // keys absent
    repeated bytes absent_keys = 3;
  }
  // All items removed or nothing removed in case of an error
  message DelResponse {
    oneof status {
      // Time the bucket and all its items were removed
      google.protobuf.Timestamp removed = 1;

      // The bucket to be removed was absent
      google.protobuf.Empty absent = 2;

      // Nothing can be removed due to errors(e.g, checksum mismatch)
      Rejected rejected = 3;
    }
  }
}

service BucketService {
  rpc Del(Bkt.DelRequest) returns (Bkt.DelResponse);
}
